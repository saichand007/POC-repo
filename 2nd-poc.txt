import React, { useState, useEffect, useRef } from 'react';
import * as d3 from 'd3';

const PipelineOverview = ({ onClose }) => {
  const svgRef = useRef();

  useEffect(() => {
    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove();

    const width = 380;
    const height = 280;

    // Sample pipeline data
    const nodes = [
      { id: 'input', label: 'Input', x: 60, y: 140, status: 'completed' },
      { id: 'preprocess', label: 'Preprocess', x: 140, y: 90, status: 'completed' },
      { id: 'model', label: 'Model', x: 220, y: 140, status: 'running' },
      { id: 'output', label: 'Output', x: 300, y: 140, status: 'pending' }
    ];

    const links = [
      { source: 'input', target: 'preprocess' },
      { source: 'preprocess', target: 'model' },
      { source: 'model', target: 'output' }
    ];

    svg.attr('width', width).attr('height', height);

    // Create links
    svg.selectAll('.link')
      .data(links)
      .enter()
      .append('line')
      .attr('class', 'link')
      .attr('x1', d => nodes.find(n => n.id === d.source).x)
      .attr('y1', d => nodes.find(n => n.id === d.source).y)
      .attr('x2', d => nodes.find(n => n.id === d.target).x)
      .attr('y2', d => nodes.find(n => n.id === d.target).y)
      .attr('stroke', '#666')
      .attr('stroke-width', 2);

    // Create nodes
    const nodeGroups = svg.selectAll('.node')
      .data(nodes)
      .enter()
      .append('g')
      .attr('class', 'node')
      .attr('transform', d => `translate(${d.x}, ${d.y})`);

    nodeGroups.append('circle')
      .attr('r', 18)
      .attr('fill', d => {
        switch(d.status) {
          case 'completed': return '#10b981';
          case 'running': return '#f59e0b';
          case 'pending': return '#6b7280';
          default: return '#3b82f6';
        }
      })
      .attr('stroke', '#fff')
      .attr('stroke-width', 2);

    nodeGroups.append('text')
      .attr('text-anchor', 'middle')
      .attr('dy', 32)
      .attr('font-size', '11px')
      .attr('fill', '#374151')
      .text(d => d.label);

    // Add pulsing animation for running node
    svg.selectAll('.node')
      .filter(d => d.status === 'running')
      .select('circle')
      .transition()
      .duration(1000)
      .attr('r', 22)
      .transition()
      .duration(1000)
      .attr('r', 18)
      .on('end', function repeat() {
        d3.select(this)
          .transition()
          .duration(1000)
          .attr('r', 22)
          .transition()
          .duration(1000)
          .attr('r', 18)
          .on('end', repeat);
      });

  }, []);

  return (
    <div className="h-full flex flex-col p-4 bg-white">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-lg font-semibold text-gray-800">Pipeline Overview</h2>
        <button
          onClick={onClose}
          className="p-1 hover:bg-gray-100 rounded-full transition-colors"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div className="bg-gray-50 rounded-lg p-4 mb-4">
        <h3 className="text-sm font-medium text-gray-700 mb-2">Current Pipeline Status</h3>
        <div className="flex flex-wrap gap-2">
          <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">Input: Complete</span>
          <span className="px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full">Preprocessing: Complete</span>
          <span className="px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full">Model: Running</span>
          <span className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">Output: Pending</span>
        </div>
      </div>

      <div className="bg-white border rounded-lg p-4 flex-grow">
        <h4 className="text-sm font-medium text-gray-700 mb-2">Pipeline Visualization</h4>
        <svg ref={svgRef} className="w-full"></svg>
      </div>

      <div className="mt-4">
        <p className="text-xs text-gray-500">
          Last updated: {new Date().toLocaleTimeString()}
        </p>
      </div>
    </div>
  );
};

const ChatMessage = ({ message, isUser, onPipelineClick }) => {
  const handleLinkClick = (text) => {
    if (text.includes('pipeline') || text.includes('Pipeline')) {
      onPipelineClick();
    }
  };

  return (
    <div className={`flex mb-3 ${isUser ? 'justify-end' : 'justify-start'}`}>
      <div
        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
          isUser
            ? 'bg-blue-500 text-white'
            : 'bg-gray-100 text-gray-800'
        } ${
          message.includes('pipeline') ? 'cursor-pointer underline' : ''
        }`}
        onClick={() => handleLinkClick(message)}
      >
        <p className="text-sm">{message}</p>
      </div>
    </div>
  );
};

const ChatArea = ({ onPipelineClick, chatWidth }) => {
  const [messages, setMessages] = useState([
    { id: 1, text: 'Hello! How can I help you today?', isUser: false },
    { id: 2, text: 'Can you show me the pipeline overview?', isUser: true },
    { id: 3, text: 'Sure! Click on "pipeline overview" to see the current status.', isUser: false }
  ]);
  const [newMessage, setNewMessage] = useState('');

  const handleSendMessage = () => {
    if (newMessage.trim()) {
      const userMessage = { id: Date.now(), text: newMessage, isUser: true };
      setMessages(prev => [...prev, userMessage]);
      
      // Simulate response
      setTimeout(() => {
        const responses = [
          'I understand you want to see the pipeline overview. Click the link above!',
          'The pipeline is currently processing your request.',
          'You can monitor the pipeline status in real-time.',
          'Would you like me to explain any specific part of the pipeline?'
        ];
        const response = {
          id: Date.now() + 1,
          text: responses[Math.floor(Math.random() * responses.length)],
          isUser: false
        };
        setMessages(prev => [...prev, response]);
      }, 1000);
      
      setNewMessage('');
    }
  };

  return (
    <div
      className="flex flex-col h-screen transition-all duration-300 ease-in-out"
      style={{ width: chatWidth }}
    >
      <header className="bg-blue-600 text-white p-4">
        <h1 className="text-xl font-semibold">Chat Interface</h1>
      </header>

      <div className="flex-1 p-4 overflow-auto bg-gray-50">
        {messages.map((message) => (
          <ChatMessage
            key={message.id}
            message={message.text}
            isUser={message.isUser}
            onPipelineClick={onPipelineClick}
          />
        ))}
      </div>

      <div className="p-4 bg-white border-t">
        <div className="flex gap-2">
          <input
            type="text"
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Type your message..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={(e) => {
              if (e.key === 'Enter') {
                handleSendMessage();
              }
            }}
          />
          <button
            onClick={handleSendMessage}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

const ResizableHandle = ({ onDrag }) => {
  const [isDragging, setIsDragging] = useState(false);

  const handleMouseDown = (e) => {
    e.preventDefault();
    setIsDragging(true);
    
    const startX = e.clientX;
    
    const handleMouseMove = (e) => {
      const deltaX = e.clientX - startX;
      onDrag(deltaX);
    };
    
    const handleMouseUp = () => {
      setIsDragging(false);
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  return (
    <div
      className={`w-2 h-full cursor-col-resize flex items-center justify-center transition-colors ${
        isDragging ? 'bg-blue-500' : 'bg-gray-300 hover:bg-blue-400'
      }`}
      onMouseDown={handleMouseDown}
    >
      <div className="w-1 h-8 bg-white bg-opacity-50 rounded"></div>
    </div>
  );
};

const App = () => {
  const [showPipeline, setShowPipeline] = useState(false);
  const [pipelineWidth, setPipelineWidth] = useState(400);
  const minPipelineWidth = 300;
  const maxPipelineWidth = 600;

  const handlePipelineOpen = () => {
    setShowPipeline(true);
  };

  const handlePipelineClose = () => {
    setShowPipeline(false);
  };

  const handleResize = (deltaX) => {
    setPipelineWidth(prev => {
      const newWidth = Math.max(minPipelineWidth, Math.min(maxPipelineWidth, prev - deltaX));
      return newWidth;
    });
  };

  const chatWidth = showPipeline ? `calc(100vw - ${pipelineWidth}px)` : '100vw';

  return (
    <div className="flex h-screen overflow-hidden bg-gray-100">
      <ChatArea onPipelineClick={handlePipelineOpen} chatWidth={chatWidth} />
      
      {showPipeline && (
        <>
          <ResizableHandle onDrag={handleResize} />
          <div
            className="h-screen bg-white border-l border-gray-200 transition-all duration-300 ease-in-out"
            style={{ width: `${pipelineWidth}px` }}
          >
            <PipelineOverview onClose={handlePipelineClose} />
          </div>
        </>
      )}
    </div>
  );
};

export default App;
